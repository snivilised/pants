---
# dependencies:
# - ginkgo
# - goi18n
# - golangci-lint
# - goveralls
# - yamllint

version: "3"
silent: true

dotenv: [".env"]

tasks:

  # === build ================================================

  b:
    cmds:
      - go build ./...

  # === test =================================================

  t:
    cmds:
      - go test ./...

  ti:
    cmds:
      - go test ./locale

  dry:
    cmds:
      - ginkgo -v --dry-run ./...

  # === ginkgo ================================================

  # initialise a test suite for a package. (only 1 per package)
  boot:
    cmds:
      - ginkgo bootstrap

  # run tests suites recursive
  g:
    cmds:
      - ginkgo -r

  # invoke as task gen -- <item>
  gl:
    cmds:
      - ginkgo -r --label-filter={{.CLI_ARGS}}

  # run tests suites recursive with verbose
  gv:
    cmds:
      - ginkgo -r -v

  # generate a test file for the item provided (item_test.go)
  # invoke as task gen -- <item>
  gen:
    cmds:
      - ginkgo generate {{.CLI_ARGS}}

  # NB: this clean task is very aggressive. It will not only remove
  # old versions of packages, it removes all of them, even the
  # current versions in use. You can use the download task to
  # refresh the pkg cache.
  #
  clean:
    cmds:
      - go clean

  clean-t:
    cmds:
      - go clean -testcache

  # === test =================================================

  t:
    cmds:
      - ginkgo -p ./...

  ta:
    cmds:
      - ginkgo -p ./internal/ants

  tl:
    cmds:
      - go test ./locale

  dry:
    cmds:
      - ginkgo -v --dry-run ./...

  # === ginkgo ================================================

  # initialise a test suite for a package. (only 1 per package)
  boot:
    cmds:
      - ginkgo bootstrap

  # run tests suites recursive
  g:
    cmds:
      - ginkgo -p -r

  # invoke as task gen -- <item>
  gl:
    cmds:
      - ginkgo -p -r --label-filter={{.CLI_ARGS}}

  # run tests suites recursive with verbose
  gv:
    cmds:
      - ginkgo -p -r -v

  # generate a test file for the item provided (item_test.go)
  # invoke as task gen -- <item>
  gen:
    cmds:
      - ginkgo generate {{.CLI_ARGS}}

  # === watch ================================================

  watchv:
    cmds:
      - ginkgo watch -v -r -p ./...

  watchvl:
    cmds:
      - ginkgo watch -v -r -p ./locale

  watch:
    cmds:
      - ginkgo watch -r -p ./...

  # === lint =================================================

  lint:
    cmds:
      - golangci-lint run

  linty:
    cmds:
      - yamllint *.y*ml

  # === coverage =============================================

  publish-cover:
    cmds:
      - goveralls -repotoken {{.COVERALLS_TOKEN}}

  cover:
    cmds:
      - ginkgo --json-report
        ./ginkgo.report
        -coverpkg=./...
        -coverprofile=./coverage/coverage.out -r

  # === i18n =================================================

  clear:
    cmds:
      - rm ./locale/out/* --recursive

  # extract i18m messages
  extract:
    cmds:
      - goi18n extract
        -format json
        -sourceLanguage "en-GB"
        -outdir ./locale/out/l10n

  # new translation
  newt:
    deps: [extract]
    cmds:
      - touch ./locale/out/l10n/translate.en-US.json

  # derive a translation from the default
  merge:
    cmds:
      - goi18n merge
        -format json
        -sourceLanguage "en-GB"
        -outdir ./locale/out
        ./locale/out/active.en-GB.json ./locale/out/l10n/translate.en-US.json

  # update existing translations
  # after running this task, the translation file generated will
  # contain only the new translations. Update the active file,
  # with the new translations. Also, need to copy the default
  # file (active.en-GB.json) back into ./locale/default
  update:
    deps: [extract]
    cmds:
      - goi18n merge
        -format json
        -sourceLanguage "en-GB"
        -outdir ./locale/out
        ./locale/out/active.en-GB.json ./locale/deploy/active.en-US.json

  # run this after manual translation has occurred to integrate it
  # back into the translation file. Unfortunately, this task doesn't
  # work properly, because it does not include the hashes. Without
  # this task, the new translations must be manually added to the active
  # translation file (active.en-US.json).
  accept:
    cmds:
      - goi18n merge
        -format json
        -sourceLanguage "en-US"
        -outdir ./locale/temp
        ./locale/out/translate.en-US.json ./locale/deploy/active.en-US.json
